Test for file 1-my_list.py

::

case 0: import

	>>> MyList = __import__('1-my_list').MyList

::

case 1: common case

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(my_list)
	[1, 4, 2, 3, 5]

::

case 2: not defined object

	>>my_list2.print_sorted()
	Traceback (most recent call last):
	NameError: name 'my_list2' is not defined


Case 3: Passing a list 
	>>> a = [1, 9, 6]
	>>> my_list = MyList(a)
	>>> my_list.print_sorted()
	[1, 6, 9]

Case 4: Passing a tuple

	>>> b = (1, 6, 4)
	>>> my_list = MyList(b)
	>>> b.print_sorted()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	AttributeError: 'tuple' object has no attribute 'print_sorted'

Case 5: Empty List

	>>> c = []
	>>> my_list = MyList(c)
	>>> my_list.print_sorted()
	[]

Case 6: An already sorted list

	>>> d = [1, 2, 3, 4]
	>>> my_list = MyList(d)
	>>> my_list.print_sorted()
	[1, 2, 3, 4]

Case 7: Only one element in the list

	>>> my_list = MyList()
	>>> my_list.append(4)
	>>> my_list.print_sorted()
	[4]

Case 8: Multiple elements with the same value

	>>> my_list = MyList()
	>>> my_list.append(4)
	>>> my_list.append(4)
	>>> my_list.append(4)
	>>> my_list.print_sorted()
	[4, 4, 4]

Case 9: Negative numbers

	>>> my_list = MyList()
	>>> my_list.append(3)
	>>> my_list.append(-3)
	>>> my_list.append(2)
	>>> my_list.append(-1)
	>>> my_list.print_sorted()
	[-3, -1, 2, 3]

Case 10: directly accessing print_sorted func from parent class

	>>> f = [9, 10, 7]
	>>> f.print_sorted()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	AttributeError: 'list' object has no attribute 'print_sorted'
